-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/autocomplete-haskell#readme</a>
@package autocomplete-haskell
@version 0.1.0.0


-- | This module provides an implementation along with functions for
--   working with tries. Tries allow for a fast and scalable implementation
--   of autocomplete.
module Tries

-- | Trie + autocomplete examples in a REPL environment
--   
--   <pre>
--   &gt;&gt;&gt; import Tries
--   
--   &gt;&gt;&gt; mytrie = trieFromList [(30, "an"), (12, "to"), (25, "ted"), (20, "a"), (14, "tea")]
--   
--   &gt;&gt;&gt; mytrie
--   a 20.0 30.0
--     n 30.0 -1.0
--   t -1.0 25.0
--     o 12.0 -1.0
--     e -1.0 25.0
--       a 14.0 -1.0
--       d 25.0 -1.0
--   
--   &gt;&gt;&gt; mytrie_augmented = insertWords [(5, "in"), (15, "inn")] mytrie
--   
--   &gt;&gt;&gt; mytrie_augmented
--   a 20.0 30.0
--      n 30.0 -1.0
--   t -1.0 25.0
--      o 12.0 -1.0
--      e -1.0 25.0
--         a 14.0 -1.0
--         d 25.0 -1.0
--   i -1.0 15.0
--      n 5.0 15.0
--         n 15.0 -1.0
--   isInTrie "inn" mytrie
--   False
--   isInTrie "inn" mytrie_augmented
--   True
--   
--   &gt;&gt;&gt; removePrefix "inn"  mytrie_augmented
--   a 20.0 30.0
--      n 30.0 -1.0
--   t -1.0 25.0
--      o 12.0 -1.0
--      e -1.0 25.0
--         a 14.0 -1.0
--         d 25.0 -1.0
--   i -1.0 5.0
--      n 5.0 -1.0
--   
--   &gt;&gt;&gt; updateWeight sqrt "ted" mytrie_augmented
--   a 20.0 30.0
--      n 30.0 -1.0
--   t -1.0 14.0
--      o 12.0 -1.0
--      e -1.0 14.0
--         a 14.0 -1.0
--         d 5.0 -1.0
--   i -1.0 15.0
--      n 5.0 15.0
--         n 15.0 -1.0
--   
--   &gt;&gt;&gt; mytrie_augmented -- Notice that this trie was never modified.
--   a 20.0 30.0
--      n 30.0 -1.0
--   t -1.0 25.0
--      o 12.0 -1.0
--      e -1.0 25.0
--         a 14.0 -1.0
--         d 25.0 -1.0
--   i -1.0 15.0
--      n 5.0 15.0
--         n 15.0 -1.0
--   
--   &gt;&gt;&gt; autocomplete "t" mytrie 3
--   [(25.0,"ted"),(14.0,"tea"),(12.0,"to")]
--   
--   &gt;&gt;&gt; autocomplete "in" mytrie 5
--   []
--   
--   &gt;&gt;&gt; autocomplete "in" mytrie_augmented 5
--   [(15.0,"inn"),(5.0,"in")]
--   </pre>
--   
--   The generic Trie data structure.
data Trie

-- | The empty trie
EmptyTrie :: Trie

-- | Non-empty tries are prefix nodes
PrefixNode :: String -> Double -> Double -> HashMap String Trie -> Trie

-- | A string of length one (or 0 if we're at the root node)
[prefix] :: Trie -> String

-- | The weight of the prefix. This is -1 for non-words and non-negative
--   for words
[weight] :: Trie -> Double

-- | The maximum weight of all children of this node
[max_child_wt] :: Trie -> Double

-- | A HashMap of the children. Keys are prefixes, values are tries
[children] :: Trie -> HashMap String Trie

-- | The root node from which we can build more interesting <a>Trie</a>s.
rootNode :: Trie

-- | Map a function on the <a>children</a> of a <a>Trie</a>, and return the
--   updated <a>Trie</a>.
mapChildren :: (Trie -> Trie) -> Trie -> Trie

-- | Filter <a>children</a> of a <a>Trie</a> out that don't satisfy a given
--   predicate, and return the <a>Trie</a>.
filterChildren :: (Trie -> Bool) -> Trie -> Trie

-- | Reduce the <a>children</a> of a <a>Trie</a> using a binary function
--   and a starting value.
foldrChildren :: (Trie -> a -> a) -> a -> Trie -> a

-- | Get the <a>children</a> of a <a>Trie</a> as a list.
getChildrenAsList :: Trie -> [Trie]

-- | Given a <a>prefix</a> and a <a>Trie</a>, get the next node to search
--   through. e.g. if <a>prefix</a> = "hell" and <a>Trie</a> has
--   <a>prefix</a> of "hel" then this function will return the node with
--   <a>prefix</a> "hell" (or the <a>EmptyTrie</a> if it doesn't exist).
getNextNode :: String -> Trie -> Trie

-- | Get the node of the specified prefix in the <a>Trie</a>. If not in the
--   <a>Trie</a>, return <a>EmptyTrie</a>.
getNode :: String -> Trie -> Trie

-- | Check to see if a <a>prefix</a> is in a <a>Trie</a>.
isInTrie :: String -> Trie -> Bool

-- | Get the maximum <a>weight</a> in a <a>Trie</a>. This includes the
--   <a>weight</a> of the current node and all <a>children</a>.
getMaxWeight :: Trie -> Double

-- | Update the <a>max_child_wt</a> of the current node (not of any
--   <a>children</a>). Warning: this function assumes that all children
--   have accurate <a>max_child_wt</a> values This is used to update a
--   <a>Trie</a> whose <a>max_child_wt</a> value becomes stale once a child
--   is deletmax_weighted (for example).
updateMaxChildWeight :: Trie -> Trie

-- | Insert a child <a>Trie</a> into a parent trie and update the
--   <a>max_child_wt</a> of the parent.
insertChild :: Trie -> Trie -> Trie

-- | Fast version of <a>insertChild</a>. This does NOT update max_child_wt
--   for arbitrary insertions - this is only for adding new children to
--   tries that are otherwise not updated. This will throw an error if the
--   child is not valid (e.g. "the" is not a valid child of "t").
insertChildFast :: Trie -> Trie -> Trie

-- | Insert a <a>prefix</a> and its <a>weight</a> into the <a>Trie</a>.
insertPrefix :: Double -> String -> Trie -> Trie

-- | Insert weighted <a>prefix</a>es into the <a>Trie</a>. This is
--   essentially a wrapper that performs <a>insertPrefix</a> many times.
insertWords :: [(Double, String)] -> Trie -> Trie

-- | Build a <a>Trie</a> from a list of weighted words.
trieFromList :: [(Double, String)] -> Trie

-- | Update the <a>weight</a> of a node using a custom update function.
updateWeight :: (Double -> Double) -> String -> Trie -> Trie

-- | Update the <a>weight</a> of a node using a custom update function if
--   the node exists. If it doesn't exist, create it with 0 <a>weight</a>.
insertOrUpdate :: (Double -> Double) -> String -> Trie -> Trie

-- | Rescale the <a>weight</a>s in the <a>Trie</a> by an arbitrary update
--   function.
rescaleWeights :: (Double -> Double) -> Trie -> Trie

-- | Remove the child (specified as a <a>prefix</a>) from the parent. This
--   is primarily a helper function for <a>removePrefix</a>.
removeChild :: String -> Trie -> Trie

-- | Remove a <a>prefix</a> from the <a>Trie</a>.
removePrefix :: String -> Trie -> Trie

-- | Run <a>pruneTrie</a> on children whose maximum weight (max(weight, max
--   child weight)) is greater than or equal to <tt>threshold</tt>. This is
--   effectively just a helper function for <a>pruneTrie</a>.
pruneChildren :: Double -> Trie -> Trie

-- | Remove all nodes in a <a>Trie</a> whose weights are below a threshold.
pruneTrie :: Double -> Trie -> Trie

-- | Convert a correctly formed input line to a weighted word.
textToWtdWord :: Text -> (Double, String)

-- | Read terms from a specified <a>FilePath</a> and produce a <a>Trie</a>.
readTerms :: FilePath -> IO Trie

-- | Give a priority for <a>autocomplete</a>. This is mainly because
--   <a>MinMaxQueue</a> is a min-priority queue, so we need to flip the
--   priority by negating the <a>weight</a> of the word.
autocompletePriority :: (Double, String) -> Double

-- | Get the minimum weight in the minmaxqueue The smallest weight is
--   actually the "maximum" in the MMQ since the priorities are the
--   negative weights
mmqMinWeight :: MinMaxQueue Double (Double, String) -> Double

-- | Insert the weighted word (the tuple (<a>weight</a>, <tt>word</tt>))
--   into <tt>q</tt>
mmqInsert :: Double -> String -> MinMaxQueue Double (Double, String) -> MinMaxQueue Double (Double, String)

-- | Get all matching terms for a given <a>prefix</a>. This does the
--   majority of the work for <a>autocomplete</a>.
getMatchingPrefixes :: String -> String -> Int -> Trie -> MinMaxQueue Double (Double, String) -> MinMaxQueue Double (Double, String)

-- | Produce the top k words in a given <a>Trie</a> that match a particular
--   <a>prefix</a>, sorted by weight.
autocomplete :: String -> Trie -> Int -> [(Double, String)]

-- | Produce the top k words in a given list of weighted words that match a
--   particular query, sorted by weight.
slowComplete :: String -> [(Double, String)] -> Int -> [(Double, String)]
instance Control.DeepSeq.NFData Tries.Trie
instance GHC.Generics.Generic Tries.Trie
instance GHC.Classes.Eq Tries.Trie
instance GHC.Show.Show Tries.Trie
